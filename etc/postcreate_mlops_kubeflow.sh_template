#!/bin/bash

set -e # abort on error
set -u # abort on undefined variable

source "./scripts/variables.sh"
source "./scripts/functions.sh"

print_header "Installing HPECP CLI to local machine"
export HPECP_CONFIG_FILE=generated/hpecp.conf
export HPECP_LOG_CONFIG_FILE=${PWD}/generated/hpecp_cli_logging.conf
pip3 uninstall -y hpecp || true # uninstall if exists
pip3 install --user --upgrade hpecp

HPECP_VERSION=$(hpecp config get --query 'objects.[bds_global_version]' --output text)
echo "HPECP Version: ${HPECP_VERSION}"

print_header "Configuring Global Active Directory in HPE CP"
./bin/experimental/01_configure_global_active_directory.sh

print_header "Adding a Gateway to HPE CP"
./bin/experimental/02_gateway_add.sh

if [[ "${INSTALL_WITH_SSL}" == "True" ]]; then
   print_header "Setting Gateway SSL"
   ./bin/experimental/set_gateway_ssl.sh
fi

print_header "Configuring Active Directory in Demo Tenant"
./bin/experimental/setup_demo_tenant_ad.sh

if [[ $HPECP_VERSION == "5.0"* ]]; then
   # 5.1+ embedded mapr is configured automatically with SSSD
   print_header "Configuring Active Directory on HCP Embedded DF"
   ./scripts/end_user_scripts/embedded_mapr/1_setup_epic_mapr_sssd.sh
fi

print_header "Configure Active Directory on RDP Host"
./scripts/end_user_scripts/embedded_mapr/2_setup_ubuntu_mapr_sssd_and_mapr_client.sh

print_header "Add ad_admin1 to HCP Embedded DF"
./bin/df-cluster-acl-ad_admin1.sh # add the ad_admin1 user to the cluster

set +e # ignore errors
print_header "Create Datatap to HCP Embedded DF"
./scripts/end_user_scripts/embedded_mapr/3_setup_datatap_new.sh
set -e

print_header "Enable Virtual Nodes on Controller"
./bin/experimental/epic_enable_virtual_node_assignment.sh

WORKER_HOST_1_IP=${WRKR_PRV_IPS[0]}
WORKER_HOST_2_IP=${WRKR_PRV_IPS[1]}

print_header "Setup two hosts as K8s workers"
./bin/experimental/03_k8sworkers_add.sh "${WORKER_HOST_1_IP}" "${WORKER_HOST_2_IP}" # add 2 EC2 hosts as k8s workers

WORKER_IDS=$(hpecp k8sworker list --query "[*].[_links.self.href] | []" --output text | tr "\n" " ")

print_header "Create MLOPS cluster and tenant"
./bin/experimental/mlops_with_kubeflow_create.sh $WORKER_IDS
