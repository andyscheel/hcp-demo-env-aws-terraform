#
# Select an appropriate region and availability zone
#

profile            = "default"
region             = "eu-west-2"
az                 = "eu-west-2a"

#
# Set this to something meaningful.  it is used as a tag in aws 
#

project_id         = "csnow-scratch"
user               = "csnow"

#
# Before setting the vpc cidr block, manually verify the vpc cidr doesn't already exist in your region
#

vpc_cidr_block     = "10.1.0.0/16"
subnet_cidr_block  = "10.1.0.0/24"

# This project requirs a client cidr block to be set to allow access to the aws vpc from your client machine
# Most users will set the client cidr block automatically using the terraform CLI, e.g.
#
# `terraform apply ... -var="client_cidr_block=$(curl -s http://ifconfig.me/ip)/32" ...`
#
# The above approach retrieves the internet IP of your gateway connection to the internet.
# The benefit of using the CLI is that if you change networks frequently (e.g. mobile users), you can simply
# run the `terraform apply ...` command again and it will update the AWS network ACL with your new address.
# If your client is always on the same network and you don't wish to set your client cidr block with the CLI,
# you can set this address below.

# client_cidr_block  = "x.x.x.x/32"


# Set the check_client_ip to true to check if the current client_ip is inside the client_cidr_block
# If the client_ip isn't inside the client_cidr_block, you won't be able to connect to the VPN from your client machine.

check_client_ip  = "true" 


#
# gateway, controller and workers all share the same ami and ssh pubic key
#

ec2_ami            = "ami-00846a67" # this is valid for the London region, change if required
                                    #
                                    # N.Virginia : ami-9887c6e7 ?
                                    # Ohio       : ami-e1496384 ?
                                    # N.Calif.   : ami-4826c22b ?
                                    # Oregon     : ami-3ecc8f46 ?
                                    #
                                    # Singapore  : ami-8e0205f2
                                    #
                                    # Frankfurt  : ami-dd3c0f36 ?
                                    # Ireland    : ami-3548444c
                                    # London     : ami-00846a67
                                    # Paris      : ami-262e9f5b
                                    # Stockholm  : ami-b133bccf ?
                                    # 
                                    # Find more at: 
                                    # https://console.aws.amazon.com/ec2/home?region=us-east-1#Images:visibility=public-images;search=aws-marketplace/CentOS%20Linux%207%20x86_64%20HVM%20EBS%20ENA%201805_01-b7ee8a69-ee97-4a49-9e68-afaee216db2e-ami-77ec9308.4

# specify how many BlueData workers you want
worker_count = 3

# you may need to change the instance types if the ones
# listed below are not available in your region

gtw_instance_type  = "m4.4xlarge" # Paris: "m5.4xlarge"
ctr_instance_type  = "m4.4xlarge" # Paris: "m5.4xlarge"
wkr_instance_type  = "m4.4xlarge" # Paris: "m5.4xlarge"
nfs_instance_type  = "t2.small"
ad_instance_type   = "t2.small"

# the path to your ssh private key on your local machine
# use double \\ for windows paths

ssh_prv_key_path   = "/home/snowch/.ssh/id_rsa" 
ssh_pub_key_path   = "/home/snowch/.ssh/id_rsa.pub" 

#
# software download url
#

# ask your BlueData sales contact to provide you with the url
# this may be a S3 presigned url, for example private binaries
# in S3 presigned with: `aws s3 presign s3://bucket/bluedata-installer.bin`

epic_dl_url          = "enter url"

# EPIC 5x alpha currently requires selinux to be disabled, uncomment 
# the following to disable selinux.

#selinux_disabled     = true

# set to true to enable a nfs server, required for ML OPS

nfs_server_enabled = false

# set to true to create an Active Directory server for BlueData, required for ML OPS

ad_server_enabled = false

rdp_server_enabled = false

